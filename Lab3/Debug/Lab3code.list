
Lab3code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002300  08002300  00012300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002320  08002320  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08002320  08002320  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002320  08002320  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002320  08002320  00012320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002324  08002324  00012324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08002328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000050  08002378  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002378  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000924f  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b69  00000000  00000000  000292c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002ae38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002b880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f26  00000000  00000000  0002c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd5a  00000000  00000000  000430ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822b5  00000000  00000000  0004ee28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d10dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002814  00000000  00000000  000d1130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	080022e8 	.word	0x080022e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	080022e8 	.word	0x080022e8

0800014c <isButtonPressed>:
int KeyReg3[NUMBER_OF_BUTTON] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};

int TimeForKeyPress[NUMBER_OF_BUTTON]={100,100,100};
int button_flag[NUMBER_OF_BUTTON]={};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1)
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
	{
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000006c 	.word	0x2000006c

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000006c 	.word	0x2000006c

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for(int i = 0;i < NUMBER_OF_BUTTON; i++)
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e092      	b.n	80002d2 <getKeyInput+0x132>
	{
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a4d      	ldr	r2, [pc, #308]	; (80002e4 <getKeyInput+0x144>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	494c      	ldr	r1, [pc, #304]	; (80002e8 <getKeyInput+0x148>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a4b      	ldr	r2, [pc, #300]	; (80002ec <getKeyInput+0x14c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4947      	ldr	r1, [pc, #284]	; (80002e4 <getKeyInput+0x144>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch(i)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b02      	cmp	r3, #2
 80001d0:	d01f      	beq.n	8000212 <getKeyInput+0x72>
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2b02      	cmp	r3, #2
 80001d6:	dc27      	bgt.n	8000228 <getKeyInput+0x88>
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d003      	beq.n	80001e6 <getKeyInput+0x46>
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d00b      	beq.n	80001fc <getKeyInput+0x5c>
 80001e4:	e020      	b.n	8000228 <getKeyInput+0x88>
		{
			case 0:
			 KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001e6:	2101      	movs	r1, #1
 80001e8:	4841      	ldr	r0, [pc, #260]	; (80002f0 <getKeyInput+0x150>)
 80001ea:	f001 f855 	bl	8001298 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4619      	mov	r1, r3
 80001f2:	4a3e      	ldr	r2, [pc, #248]	; (80002ec <getKeyInput+0x14c>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 break;
 80001fa:	e015      	b.n	8000228 <getKeyInput+0x88>
			case 1:
			 KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001fc:	2102      	movs	r1, #2
 80001fe:	483c      	ldr	r0, [pc, #240]	; (80002f0 <getKeyInput+0x150>)
 8000200:	f001 f84a 	bl	8001298 <HAL_GPIO_ReadPin>
 8000204:	4603      	mov	r3, r0
 8000206:	4619      	mov	r1, r3
 8000208:	4a38      	ldr	r2, [pc, #224]	; (80002ec <getKeyInput+0x14c>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 break;
 8000210:	e00a      	b.n	8000228 <getKeyInput+0x88>
			case 2:
			 KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000212:	2104      	movs	r1, #4
 8000214:	4836      	ldr	r0, [pc, #216]	; (80002f0 <getKeyInput+0x150>)
 8000216:	f001 f83f 	bl	8001298 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	4619      	mov	r1, r3
 800021e:	4a33      	ldr	r2, [pc, #204]	; (80002ec <getKeyInput+0x14c>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 break;
 8000226:	bf00      	nop
		}
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000228:	4a2f      	ldr	r2, [pc, #188]	; (80002e8 <getKeyInput+0x148>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	492c      	ldr	r1, [pc, #176]	; (80002e4 <getKeyInput+0x144>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000238:	429a      	cmp	r2, r3
 800023a:	d147      	bne.n	80002cc <getKeyInput+0x12c>
 800023c:	4a29      	ldr	r2, [pc, #164]	; (80002e4 <getKeyInput+0x144>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	4929      	ldr	r1, [pc, #164]	; (80002ec <getKeyInput+0x14c>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024c:	429a      	cmp	r2, r3
 800024e:	d13d      	bne.n	80002cc <getKeyInput+0x12c>
		  if (KeyReg3[i] != KeyReg2[i]){
 8000250:	4a28      	ldr	r2, [pc, #160]	; (80002f4 <getKeyInput+0x154>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000258:	4924      	ldr	r1, [pc, #144]	; (80002ec <getKeyInput+0x14c>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000260:	429a      	cmp	r2, r3
 8000262:	d016      	beq.n	8000292 <getKeyInput+0xf2>
			  KeyReg3[i] = KeyReg2[i];
 8000264:	4a21      	ldr	r2, [pc, #132]	; (80002ec <getKeyInput+0x14c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026c:	4921      	ldr	r1, [pc, #132]	; (80002f4 <getKeyInput+0x154>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			  if (KeyReg2[i] == PRESSED_STATE){
 8000274:	4a1d      	ldr	r2, [pc, #116]	; (80002ec <getKeyInput+0x14c>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d125      	bne.n	80002cc <getKeyInput+0x12c>
				  TimeForKeyPress[i] = 200;
 8000280:	4a1d      	ldr	r2, [pc, #116]	; (80002f8 <getKeyInput+0x158>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	21c8      	movs	r1, #200	; 0xc8
 8000286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				  subKeyProcess(i);
 800028a:	6878      	ldr	r0, [r7, #4]
 800028c:	f7ff ff78 	bl	8000180 <subKeyProcess>
 8000290:	e01c      	b.n	80002cc <getKeyInput+0x12c>
			  }
		  }else{
			  TimeForKeyPress[i] --;
 8000292:	4a19      	ldr	r2, [pc, #100]	; (80002f8 <getKeyInput+0x158>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029a:	1e5a      	subs	r2, r3, #1
 800029c:	4916      	ldr	r1, [pc, #88]	; (80002f8 <getKeyInput+0x158>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (TimeForKeyPress[i] == 0){
 80002a4:	4a14      	ldr	r2, [pc, #80]	; (80002f8 <getKeyInput+0x158>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d10d      	bne.n	80002cc <getKeyInput+0x12c>
				  if (KeyReg2[i] == PRESSED_STATE){
 80002b0:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <getKeyInput+0x14c>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d102      	bne.n	80002c2 <getKeyInput+0x122>
					  subKeyProcess(i);
 80002bc:	6878      	ldr	r0, [r7, #4]
 80002be:	f7ff ff5f 	bl	8000180 <subKeyProcess>
				  }
				  TimeForKeyPress[i] = 200;
 80002c2:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <getKeyInput+0x158>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	21c8      	movs	r1, #200	; 0xc8
 80002c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0;i < NUMBER_OF_BUTTON; i++)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b02      	cmp	r3, #2
 80002d6:	f77f af69 	ble.w	80001ac <getKeyInput+0xc>
			  }

		  }
		}
	}
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	2000000c 	.word	0x2000000c
 80002e8:	20000000 	.word	0x20000000
 80002ec:	20000018 	.word	0x20000018
 80002f0:	40010c00 	.word	0x40010c00
 80002f4:	20000024 	.word	0x20000024
 80002f8:	20000030 	.word	0x20000030

080002fc <fsm_automatic_run>:
 */
#include "fsm_automatic.h"


void fsm_automatic_run()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	switch(status)
 8000300:	4b43      	ldr	r3, [pc, #268]	; (8000410 <fsm_automatic_run+0x114>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	3b01      	subs	r3, #1
 8000306:	2b04      	cmp	r3, #4
 8000308:	d87f      	bhi.n	800040a <fsm_automatic_run+0x10e>
 800030a:	a201      	add	r2, pc, #4	; (adr r2, 8000310 <fsm_automatic_run+0x14>)
 800030c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000310:	08000325 	.word	0x08000325
 8000314:	08000355 	.word	0x08000355
 8000318:	0800038b 	.word	0x0800038b
 800031c:	080003c1 	.word	0x080003c1
 8000320:	080003f1 	.word	0x080003f1
	{
	case INIT:
		led_display_run(INIT);
 8000324:	2001      	movs	r0, #1
 8000326:	f000 fa05 	bl	8000734 <led_display_run>
		status = AUTO_RED_GREEN;
 800032a:	4b39      	ldr	r3, [pc, #228]	; (8000410 <fsm_automatic_run+0x114>)
 800032c:	2202      	movs	r2, #2
 800032e:	601a      	str	r2, [r3, #0]
		setTimer1(3000);
 8000330:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000334:	f000 fb82 	bl	8000a3c <setTimer1>
		setTimer2(100);
 8000338:	2064      	movs	r0, #100	; 0x64
 800033a:	f000 fb99 	bl	8000a70 <setTimer2>
		setTimer3(1000);
 800033e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000342:	f000 fbaf 	bl	8000aa4 <setTimer3>
		count_led1 = 4;
 8000346:	4b33      	ldr	r3, [pc, #204]	; (8000414 <fsm_automatic_run+0x118>)
 8000348:	2204      	movs	r2, #4
 800034a:	601a      	str	r2, [r3, #0]
		count_led2 = 2;
 800034c:	4b32      	ldr	r3, [pc, #200]	; (8000418 <fsm_automatic_run+0x11c>)
 800034e:	2202      	movs	r2, #2
 8000350:	601a      	str	r2, [r3, #0]
		break;
 8000352:	e05b      	b.n	800040c <fsm_automatic_run+0x110>
	case AUTO_RED_GREEN:
		led_display_run(AUTO_RED_GREEN);
 8000354:	2002      	movs	r0, #2
 8000356:	f000 f9ed 	bl	8000734 <led_display_run>
		if(timer1_flag == 1)
 800035a:	4b30      	ldr	r3, [pc, #192]	; (800041c <fsm_automatic_run+0x120>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d10d      	bne.n	800037e <fsm_automatic_run+0x82>
		{
			status = AUTO_YELLOW_ROW;
 8000362:	4b2b      	ldr	r3, [pc, #172]	; (8000410 <fsm_automatic_run+0x114>)
 8000364:	2203      	movs	r2, #3
 8000366:	601a      	str	r2, [r3, #0]
			count_led2 = 1;
 8000368:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <fsm_automatic_run+0x11c>)
 800036a:	2201      	movs	r2, #1
 800036c:	601a      	str	r2, [r3, #0]
			setTimer1(2000);
 800036e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000372:	f000 fb63 	bl	8000a3c <setTimer1>
			setTimer3(1000);
 8000376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800037a:	f000 fb93 	bl	8000aa4 <setTimer3>
		}
		led7SEG_run();
 800037e:	f000 f9af 	bl	80006e0 <led7SEG_run>
		if(isButtonPressed(1))
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff fee2 	bl	800014c <isButtonPressed>
		{

		}
		break;
 8000388:	e040      	b.n	800040c <fsm_automatic_run+0x110>
	case AUTO_YELLOW_ROW:
		led_display_run(AUTO_YELLOW_ROW);
 800038a:	2003      	movs	r0, #3
 800038c:	f000 f9d2 	bl	8000734 <led_display_run>
		if(timer1_flag == 1)
 8000390:	4b22      	ldr	r3, [pc, #136]	; (800041c <fsm_automatic_run+0x120>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d110      	bne.n	80003ba <fsm_automatic_run+0xbe>
		{
			status = AUTO_GREEN_RED;
 8000398:	4b1d      	ldr	r3, [pc, #116]	; (8000410 <fsm_automatic_run+0x114>)
 800039a:	2204      	movs	r2, #4
 800039c:	601a      	str	r2, [r3, #0]
			count_led1 = 2;
 800039e:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <fsm_automatic_run+0x118>)
 80003a0:	2202      	movs	r2, #2
 80003a2:	601a      	str	r2, [r3, #0]
			count_led2 = 4;
 80003a4:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <fsm_automatic_run+0x11c>)
 80003a6:	2204      	movs	r2, #4
 80003a8:	601a      	str	r2, [r3, #0]
			setTimer1(3000);
 80003aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80003ae:	f000 fb45 	bl	8000a3c <setTimer1>
			setTimer3(1000);
 80003b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b6:	f000 fb75 	bl	8000aa4 <setTimer3>
		}
		led7SEG_run();
 80003ba:	f000 f991 	bl	80006e0 <led7SEG_run>
		break;
 80003be:	e025      	b.n	800040c <fsm_automatic_run+0x110>
	case AUTO_GREEN_RED:
		led_display_run(AUTO_GREEN_RED);
 80003c0:	2004      	movs	r0, #4
 80003c2:	f000 f9b7 	bl	8000734 <led_display_run>
		if(timer1_flag == 1)
 80003c6:	4b15      	ldr	r3, [pc, #84]	; (800041c <fsm_automatic_run+0x120>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d10d      	bne.n	80003ea <fsm_automatic_run+0xee>
		{
			status = AUTO_YELLOW_LINE;
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <fsm_automatic_run+0x114>)
 80003d0:	2205      	movs	r2, #5
 80003d2:	601a      	str	r2, [r3, #0]
			count_led1 = 1;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <fsm_automatic_run+0x118>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	601a      	str	r2, [r3, #0]
			setTimer1(2000);
 80003da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003de:	f000 fb2d 	bl	8000a3c <setTimer1>
			setTimer3(1000);
 80003e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003e6:	f000 fb5d 	bl	8000aa4 <setTimer3>
		}
		led7SEG_run();
 80003ea:	f000 f979 	bl	80006e0 <led7SEG_run>
		break;
 80003ee:	e00d      	b.n	800040c <fsm_automatic_run+0x110>
	case AUTO_YELLOW_LINE:
		led_display_run(AUTO_YELLOW_LINE);
 80003f0:	2005      	movs	r0, #5
 80003f2:	f000 f99f 	bl	8000734 <led_display_run>
		if(timer1_flag == 1)
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <fsm_automatic_run+0x120>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d102      	bne.n	8000404 <fsm_automatic_run+0x108>
		{
			status = INIT;
 80003fe:	4b04      	ldr	r3, [pc, #16]	; (8000410 <fsm_automatic_run+0x114>)
 8000400:	2201      	movs	r2, #1
 8000402:	601a      	str	r2, [r3, #0]
		}
		led7SEG_run();
 8000404:	f000 f96c 	bl	80006e0 <led7SEG_run>
		break;
 8000408:	e000      	b.n	800040c <fsm_automatic_run+0x110>
	default:
		break;
 800040a:	bf00      	nop
	}
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000003c 	.word	0x2000003c
 8000414:	20000080 	.word	0x20000080
 8000418:	20000084 	.word	0x20000084
 800041c:	20000094 	.word	0x20000094

08000420 <display7SEG>:
 *      Author: Chung Thinh
 */
#include "led7seg.h"

void display7SEG(int num)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin ( GPIOA , g_Pin|f_Pin|e_Pin|d_Pin|c_Pin|b_Pin|a_Pin ,RESET );
 8000428:	2200      	movs	r2, #0
 800042a:	217f      	movs	r1, #127	; 0x7f
 800042c:	482c      	ldr	r0, [pc, #176]	; (80004e0 <display7SEG+0xc0>)
 800042e:	f000 ff4a 	bl	80012c6 <HAL_GPIO_WritePin>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2b09      	cmp	r3, #9
 8000436:	d84e      	bhi.n	80004d6 <display7SEG+0xb6>
 8000438:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <display7SEG+0x20>)
 800043a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800043e:	bf00      	nop
 8000440:	08000469 	.word	0x08000469
 8000444:	08000475 	.word	0x08000475
 8000448:	08000481 	.word	0x08000481
 800044c:	0800048d 	.word	0x0800048d
 8000450:	08000499 	.word	0x08000499
 8000454:	080004a5 	.word	0x080004a5
 8000458:	080004b1 	.word	0x080004b1
 800045c:	080004bd 	.word	0x080004bd
 8000460:	080004d5 	.word	0x080004d5
 8000464:	080004c9 	.word	0x080004c9
	switch (num)
	{
	case 0:
		HAL_GPIO_WritePin ( GPIOA , g_Pin ,SET );
 8000468:	2201      	movs	r2, #1
 800046a:	2140      	movs	r1, #64	; 0x40
 800046c:	481c      	ldr	r0, [pc, #112]	; (80004e0 <display7SEG+0xc0>)
 800046e:	f000 ff2a 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 8000472:	e030      	b.n	80004d6 <display7SEG+0xb6>
	case 1:
		HAL_GPIO_WritePin ( GPIOA , g_Pin|f_Pin|e_Pin|d_Pin|a_Pin ,SET );
 8000474:	2201      	movs	r2, #1
 8000476:	2179      	movs	r1, #121	; 0x79
 8000478:	4819      	ldr	r0, [pc, #100]	; (80004e0 <display7SEG+0xc0>)
 800047a:	f000 ff24 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 800047e:	e02a      	b.n	80004d6 <display7SEG+0xb6>
	case 2:
		HAL_GPIO_WritePin ( GPIOA , f_Pin|c_Pin ,SET );
 8000480:	2201      	movs	r2, #1
 8000482:	2124      	movs	r1, #36	; 0x24
 8000484:	4816      	ldr	r0, [pc, #88]	; (80004e0 <display7SEG+0xc0>)
 8000486:	f000 ff1e 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 800048a:	e024      	b.n	80004d6 <display7SEG+0xb6>
	case 3:
		HAL_GPIO_WritePin ( GPIOA , f_Pin|e_Pin ,SET );
 800048c:	2201      	movs	r2, #1
 800048e:	2130      	movs	r1, #48	; 0x30
 8000490:	4813      	ldr	r0, [pc, #76]	; (80004e0 <display7SEG+0xc0>)
 8000492:	f000 ff18 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 8000496:	e01e      	b.n	80004d6 <display7SEG+0xb6>
	case 4:
		HAL_GPIO_WritePin ( GPIOA , e_Pin|d_Pin|a_Pin ,SET );
 8000498:	2201      	movs	r2, #1
 800049a:	2119      	movs	r1, #25
 800049c:	4810      	ldr	r0, [pc, #64]	; (80004e0 <display7SEG+0xc0>)
 800049e:	f000 ff12 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 80004a2:	e018      	b.n	80004d6 <display7SEG+0xb6>
	case 5:
		HAL_GPIO_WritePin ( GPIOA , e_Pin|b_Pin ,SET );
 80004a4:	2201      	movs	r2, #1
 80004a6:	2112      	movs	r1, #18
 80004a8:	480d      	ldr	r0, [pc, #52]	; (80004e0 <display7SEG+0xc0>)
 80004aa:	f000 ff0c 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 80004ae:	e012      	b.n	80004d6 <display7SEG+0xb6>
	case 6:
		HAL_GPIO_WritePin ( GPIOA , b_Pin ,SET );
 80004b0:	2201      	movs	r2, #1
 80004b2:	2102      	movs	r1, #2
 80004b4:	480a      	ldr	r0, [pc, #40]	; (80004e0 <display7SEG+0xc0>)
 80004b6:	f000 ff06 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 80004ba:	e00c      	b.n	80004d6 <display7SEG+0xb6>
	case 7:
		HAL_GPIO_WritePin ( GPIOA , g_Pin|f_Pin|e_Pin|d_Pin ,SET );
 80004bc:	2201      	movs	r2, #1
 80004be:	2178      	movs	r1, #120	; 0x78
 80004c0:	4807      	ldr	r0, [pc, #28]	; (80004e0 <display7SEG+0xc0>)
 80004c2:	f000 ff00 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 80004c6:	e006      	b.n	80004d6 <display7SEG+0xb6>
	case 8:
		break;
	case 9:
		HAL_GPIO_WritePin ( GPIOA , e_Pin ,SET );
 80004c8:	2201      	movs	r2, #1
 80004ca:	2110      	movs	r1, #16
 80004cc:	4804      	ldr	r0, [pc, #16]	; (80004e0 <display7SEG+0xc0>)
 80004ce:	f000 fefa 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 80004d2:	e000      	b.n	80004d6 <display7SEG+0xb6>
		break;
 80004d4:	bf00      	nop
	}
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40010800 	.word	0x40010800

080004e4 <display7SEGOPERSITE>:
void display7SEGOPERSITE(int num)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin ( GPIOA , g1_Pin|f1_Pin|e1_Pin|d1_Pin|c1_Pin|b1_Pin|a1_Pin ,RESET );
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 80004f2:	4830      	ldr	r0, [pc, #192]	; (80005b4 <display7SEGOPERSITE+0xd0>)
 80004f4:	f000 fee7 	bl	80012c6 <HAL_GPIO_WritePin>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b09      	cmp	r3, #9
 80004fc:	d856      	bhi.n	80005ac <display7SEGOPERSITE+0xc8>
 80004fe:	a201      	add	r2, pc, #4	; (adr r2, 8000504 <display7SEGOPERSITE+0x20>)
 8000500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000504:	0800052d 	.word	0x0800052d
 8000508:	0800053b 	.word	0x0800053b
 800050c:	08000549 	.word	0x08000549
 8000510:	08000557 	.word	0x08000557
 8000514:	08000565 	.word	0x08000565
 8000518:	08000573 	.word	0x08000573
 800051c:	08000581 	.word	0x08000581
 8000520:	0800058f 	.word	0x0800058f
 8000524:	080005ab 	.word	0x080005ab
 8000528:	0800059d 	.word	0x0800059d
	switch (num)
	{
	case 0:
		HAL_GPIO_WritePin ( GPIOA , g1_Pin ,SET );
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000532:	4820      	ldr	r0, [pc, #128]	; (80005b4 <display7SEGOPERSITE+0xd0>)
 8000534:	f000 fec7 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 8000538:	e038      	b.n	80005ac <display7SEGOPERSITE+0xc8>
	case 1:
		HAL_GPIO_WritePin ( GPIOA , g1_Pin|f1_Pin|e1_Pin|d1_Pin|a1_Pin ,SET );
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 5172 	mov.w	r1, #15488	; 0x3c80
 8000540:	481c      	ldr	r0, [pc, #112]	; (80005b4 <display7SEGOPERSITE+0xd0>)
 8000542:	f000 fec0 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 8000546:	e031      	b.n	80005ac <display7SEGOPERSITE+0xc8>
	case 2:
		HAL_GPIO_WritePin ( GPIOA , f1_Pin|c1_Pin ,SET );
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800054e:	4819      	ldr	r0, [pc, #100]	; (80005b4 <display7SEGOPERSITE+0xd0>)
 8000550:	f000 feb9 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 8000554:	e02a      	b.n	80005ac <display7SEGOPERSITE+0xc8>
	case 3:
		HAL_GPIO_WritePin ( GPIOA , f1_Pin|e1_Pin ,SET );
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800055c:	4815      	ldr	r0, [pc, #84]	; (80005b4 <display7SEGOPERSITE+0xd0>)
 800055e:	f000 feb2 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 8000562:	e023      	b.n	80005ac <display7SEGOPERSITE+0xc8>
	case 4:
		HAL_GPIO_WritePin ( GPIOA , e1_Pin|d1_Pin|a1_Pin ,SET );
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 800056a:	4812      	ldr	r0, [pc, #72]	; (80005b4 <display7SEGOPERSITE+0xd0>)
 800056c:	f000 feab 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 8000570:	e01c      	b.n	80005ac <display7SEGOPERSITE+0xc8>
	case 5:
		HAL_GPIO_WritePin ( GPIOA , e1_Pin|b1_Pin ,SET );
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000578:	480e      	ldr	r0, [pc, #56]	; (80005b4 <display7SEGOPERSITE+0xd0>)
 800057a:	f000 fea4 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 800057e:	e015      	b.n	80005ac <display7SEGOPERSITE+0xc8>
	case 6:
		HAL_GPIO_WritePin ( GPIOA , b1_Pin ,SET );
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000586:	480b      	ldr	r0, [pc, #44]	; (80005b4 <display7SEGOPERSITE+0xd0>)
 8000588:	f000 fe9d 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 800058c:	e00e      	b.n	80005ac <display7SEGOPERSITE+0xc8>
	case 7:
		HAL_GPIO_WritePin ( GPIOA , g1_Pin|f1_Pin|e1_Pin|d1_Pin ,SET );
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8000594:	4807      	ldr	r0, [pc, #28]	; (80005b4 <display7SEGOPERSITE+0xd0>)
 8000596:	f000 fe96 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 800059a:	e007      	b.n	80005ac <display7SEGOPERSITE+0xc8>
	case 8:
		break;
	case 9:
		HAL_GPIO_WritePin ( GPIOA , e1_Pin ,SET );
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <display7SEGOPERSITE+0xd0>)
 80005a4:	f000 fe8f 	bl	80012c6 <HAL_GPIO_WritePin>
		break;
 80005a8:	e000      	b.n	80005ac <display7SEGOPERSITE+0xc8>
		break;
 80005aa:	bf00      	nop
	}
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40010800 	.word	0x40010800

080005b8 <two_led7SEG1>:

void two_led7SEG1()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LINE0_Pin|LINE1_Pin, SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80005c2:	481e      	ldr	r0, [pc, #120]	; (800063c <two_led7SEG1+0x84>)
 80005c4:	f000 fe7f 	bl	80012c6 <HAL_GPIO_WritePin>
	switch(status_led1)
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <two_led7SEG1+0x88>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <two_led7SEG1+0x1e>
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d017      	beq.n	8000604 <two_led7SEG1+0x4c>
		 HAL_GPIO_WritePin(GPIOB, LINE1_Pin, RESET);
		 display7SEG(count_led1%10);
		 status_led1 = 0;
		 break;
	 }
}
 80005d4:	e030      	b.n	8000638 <two_led7SEG1+0x80>
		 HAL_GPIO_WritePin(GPIOB, LINE0_Pin, RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	4817      	ldr	r0, [pc, #92]	; (800063c <two_led7SEG1+0x84>)
 80005de:	f000 fe72 	bl	80012c6 <HAL_GPIO_WritePin>
		 display7SEG(count_led1/10);
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <two_led7SEG1+0x8c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a18      	ldr	r2, [pc, #96]	; (8000648 <two_led7SEG1+0x90>)
 80005e8:	fb82 1203 	smull	r1, r2, r2, r3
 80005ec:	1092      	asrs	r2, r2, #2
 80005ee:	17db      	asrs	r3, r3, #31
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff14 	bl	8000420 <display7SEG>
		 status_led1++;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <two_led7SEG1+0x88>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <two_led7SEG1+0x88>)
 8000600:	6013      	str	r3, [r2, #0]
		 break;
 8000602:	e019      	b.n	8000638 <two_led7SEG1+0x80>
		 HAL_GPIO_WritePin(GPIOB, LINE1_Pin, RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060a:	480c      	ldr	r0, [pc, #48]	; (800063c <two_led7SEG1+0x84>)
 800060c:	f000 fe5b 	bl	80012c6 <HAL_GPIO_WritePin>
		 display7SEG(count_led1%10);
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <two_led7SEG1+0x8c>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <two_led7SEG1+0x90>)
 8000616:	fb83 1302 	smull	r1, r3, r3, r2
 800061a:	1099      	asrs	r1, r3, #2
 800061c:	17d3      	asrs	r3, r2, #31
 800061e:	1ac9      	subs	r1, r1, r3
 8000620:	460b      	mov	r3, r1
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	440b      	add	r3, r1
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	1ad1      	subs	r1, r2, r3
 800062a:	4608      	mov	r0, r1
 800062c:	f7ff fef8 	bl	8000420 <display7SEG>
		 status_led1 = 0;
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <two_led7SEG1+0x88>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
		 break;
 8000636:	bf00      	nop
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40010c00 	.word	0x40010c00
 8000640:	20000078 	.word	0x20000078
 8000644:	20000080 	.word	0x20000080
 8000648:	66666667 	.word	0x66666667

0800064c <two_led7SEG2>:
void two_led7SEG2()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ROW0_Pin|ROW1_Pin, SET);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000656:	481e      	ldr	r0, [pc, #120]	; (80006d0 <two_led7SEG2+0x84>)
 8000658:	f000 fe35 	bl	80012c6 <HAL_GPIO_WritePin>
	switch(status_led2)
 800065c:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <two_led7SEG2+0x88>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <two_led7SEG2+0x1e>
 8000664:	2b01      	cmp	r3, #1
 8000666:	d017      	beq.n	8000698 <two_led7SEG2+0x4c>
		 HAL_GPIO_WritePin(GPIOB, ROW1_Pin, RESET);
		 display7SEGOPERSITE(count_led2%10);
		 status_led2 = 0;
		 break;
	 }
}
 8000668:	e030      	b.n	80006cc <two_led7SEG2+0x80>
		 HAL_GPIO_WritePin(GPIOB, ROW0_Pin, RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000670:	4817      	ldr	r0, [pc, #92]	; (80006d0 <two_led7SEG2+0x84>)
 8000672:	f000 fe28 	bl	80012c6 <HAL_GPIO_WritePin>
		 display7SEGOPERSITE(count_led2/10);
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <two_led7SEG2+0x8c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a18      	ldr	r2, [pc, #96]	; (80006dc <two_led7SEG2+0x90>)
 800067c:	fb82 1203 	smull	r1, r2, r2, r3
 8000680:	1092      	asrs	r2, r2, #2
 8000682:	17db      	asrs	r3, r3, #31
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff2c 	bl	80004e4 <display7SEGOPERSITE>
		 status_led2++;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <two_led7SEG2+0x88>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <two_led7SEG2+0x88>)
 8000694:	6013      	str	r3, [r2, #0]
		 break;
 8000696:	e019      	b.n	80006cc <two_led7SEG2+0x80>
		 HAL_GPIO_WritePin(GPIOB, ROW1_Pin, RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <two_led7SEG2+0x84>)
 80006a0:	f000 fe11 	bl	80012c6 <HAL_GPIO_WritePin>
		 display7SEGOPERSITE(count_led2%10);
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <two_led7SEG2+0x8c>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <two_led7SEG2+0x90>)
 80006aa:	fb83 1302 	smull	r1, r3, r3, r2
 80006ae:	1099      	asrs	r1, r3, #2
 80006b0:	17d3      	asrs	r3, r2, #31
 80006b2:	1ac9      	subs	r1, r1, r3
 80006b4:	460b      	mov	r3, r1
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	440b      	add	r3, r1
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	1ad1      	subs	r1, r2, r3
 80006be:	4608      	mov	r0, r1
 80006c0:	f7ff ff10 	bl	80004e4 <display7SEGOPERSITE>
		 status_led2 = 0;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <two_led7SEG2+0x88>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
		 break;
 80006ca:	bf00      	nop
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	2000007c 	.word	0x2000007c
 80006d8:	20000084 	.word	0x20000084
 80006dc:	66666667 	.word	0x66666667

080006e0 <led7SEG_run>:
 *      Author: Chung Thinh
 */
#include "led7seg_run.h"

void led7SEG_run()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	if(timer2_flag == 1)
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <led7SEG_run+0x44>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d106      	bne.n	80006fa <led7SEG_run+0x1a>
	{

		two_led7SEG2();
 80006ec:	f7ff ffae 	bl	800064c <two_led7SEG2>
		two_led7SEG1();
 80006f0:	f7ff ff62 	bl	80005b8 <two_led7SEG1>
		setTimer2(100);
 80006f4:	2064      	movs	r0, #100	; 0x64
 80006f6:	f000 f9bb 	bl	8000a70 <setTimer2>
	}
	if(timer3_flag == 1)
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <led7SEG_run+0x48>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d10d      	bne.n	800071e <led7SEG_run+0x3e>
	{
		count_led1--;
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <led7SEG_run+0x4c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	3b01      	subs	r3, #1
 8000708:	4a08      	ldr	r2, [pc, #32]	; (800072c <led7SEG_run+0x4c>)
 800070a:	6013      	str	r3, [r2, #0]
		count_led2--;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <led7SEG_run+0x50>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3b01      	subs	r3, #1
 8000712:	4a07      	ldr	r2, [pc, #28]	; (8000730 <led7SEG_run+0x50>)
 8000714:	6013      	str	r3, [r2, #0]
		setTimer3(1000);
 8000716:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800071a:	f000 f9c3 	bl	8000aa4 <setTimer3>
	}
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000098 	.word	0x20000098
 8000728:	2000009c 	.word	0x2000009c
 800072c:	20000080 	.word	0x20000080
 8000730:	20000084 	.word	0x20000084

08000734 <led_display_run>:
 *      Author: Chung Thinh
 */
#include "led_display.h"

void led_display_run(int led_status)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	2b04      	cmp	r3, #4
 8000742:	d865      	bhi.n	8000810 <led_display_run+0xdc>
 8000744:	a201      	add	r2, pc, #4	; (adr r2, 800074c <led_display_run+0x18>)
 8000746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074a:	bf00      	nop
 800074c:	08000761 	.word	0x08000761
 8000750:	080007a1 	.word	0x080007a1
 8000754:	080007b7 	.word	0x080007b7
 8000758:	080007cf 	.word	0x080007cf
 800075c:	080007fb 	.word	0x080007fb
	switch(led_status)
	{
		case INIT:
			HAL_GPIO_WritePin(RED_LINE_GPIO_Port,RED_LINE_Pin , SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2108      	movs	r1, #8
 8000764:	482d      	ldr	r0, [pc, #180]	; (800081c <led_display_run+0xe8>)
 8000766:	f000 fdae 	bl	80012c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LINE_GPIO_Port, GREEN_LINE_Pin, SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2110      	movs	r1, #16
 800076e:	482b      	ldr	r0, [pc, #172]	; (800081c <led_display_run+0xe8>)
 8000770:	f000 fda9 	bl	80012c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_LINE_GPIO_Port, YELLOW_LINE_Pin, SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2120      	movs	r1, #32
 8000778:	4828      	ldr	r0, [pc, #160]	; (800081c <led_display_run+0xe8>)
 800077a:	f000 fda4 	bl	80012c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_ROW_GPIO_Port,RED_ROW_Pin , SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2140      	movs	r1, #64	; 0x40
 8000782:	4826      	ldr	r0, [pc, #152]	; (800081c <led_display_run+0xe8>)
 8000784:	f000 fd9f 	bl	80012c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_ROW_GPIO_Port, GREEN_ROW_Pin, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	4823      	ldr	r0, [pc, #140]	; (800081c <led_display_run+0xe8>)
 800078e:	f000 fd9a 	bl	80012c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_ROW_GPIO_Port, YELLOW_ROW_Pin, SET);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000798:	4820      	ldr	r0, [pc, #128]	; (800081c <led_display_run+0xe8>)
 800079a:	f000 fd94 	bl	80012c6 <HAL_GPIO_WritePin>
			break;
 800079e:	e038      	b.n	8000812 <led_display_run+0xde>
		case AUTO_RED_GREEN:
			HAL_GPIO_WritePin(RED_LINE_GPIO_Port,RED_LINE_Pin , RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2108      	movs	r1, #8
 80007a4:	481d      	ldr	r0, [pc, #116]	; (800081c <led_display_run+0xe8>)
 80007a6:	f000 fd8e 	bl	80012c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_ROW_GPIO_Port, GREEN_ROW_Pin, RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	481b      	ldr	r0, [pc, #108]	; (800081c <led_display_run+0xe8>)
 80007b0:	f000 fd89 	bl	80012c6 <HAL_GPIO_WritePin>
			break;
 80007b4:	e02d      	b.n	8000812 <led_display_run+0xde>
		case AUTO_YELLOW_ROW:
			HAL_GPIO_WritePin(GREEN_ROW_GPIO_Port, GREEN_ROW_Pin, SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	4818      	ldr	r0, [pc, #96]	; (800081c <led_display_run+0xe8>)
 80007bc:	f000 fd83 	bl	80012c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_ROW_GPIO_Port, YELLOW_ROW_Pin, RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	4815      	ldr	r0, [pc, #84]	; (800081c <led_display_run+0xe8>)
 80007c8:	f000 fd7d 	bl	80012c6 <HAL_GPIO_WritePin>
			break;
 80007cc:	e021      	b.n	8000812 <led_display_run+0xde>
		case AUTO_GREEN_RED:
			HAL_GPIO_WritePin(RED_LINE_GPIO_Port,RED_LINE_Pin, SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2108      	movs	r1, #8
 80007d2:	4812      	ldr	r0, [pc, #72]	; (800081c <led_display_run+0xe8>)
 80007d4:	f000 fd77 	bl	80012c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LINE_GPIO_Port, GREEN_LINE_Pin, RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2110      	movs	r1, #16
 80007dc:	480f      	ldr	r0, [pc, #60]	; (800081c <led_display_run+0xe8>)
 80007de:	f000 fd72 	bl	80012c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_ROW_GPIO_Port,RED_ROW_Pin , RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2140      	movs	r1, #64	; 0x40
 80007e6:	480d      	ldr	r0, [pc, #52]	; (800081c <led_display_run+0xe8>)
 80007e8:	f000 fd6d 	bl	80012c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_ROW_GPIO_Port, YELLOW_ROW_Pin, SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f2:	480a      	ldr	r0, [pc, #40]	; (800081c <led_display_run+0xe8>)
 80007f4:	f000 fd67 	bl	80012c6 <HAL_GPIO_WritePin>
			break;
 80007f8:	e00b      	b.n	8000812 <led_display_run+0xde>
		case AUTO_YELLOW_LINE:
			HAL_GPIO_WritePin(GREEN_LINE_GPIO_Port, GREEN_LINE_Pin, SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2110      	movs	r1, #16
 80007fe:	4807      	ldr	r0, [pc, #28]	; (800081c <led_display_run+0xe8>)
 8000800:	f000 fd61 	bl	80012c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_LINE_GPIO_Port, YELLOW_LINE_Pin, RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2120      	movs	r1, #32
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <led_display_run+0xe8>)
 800080a:	f000 fd5c 	bl	80012c6 <HAL_GPIO_WritePin>
			break;
 800080e:	e000      	b.n	8000812 <led_display_run+0xde>
		default:
			break;
 8000810:	bf00      	nop
	}
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40010c00 	.word	0x40010c00

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f000 fa4e 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f80c 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082c:	f000 f892 	bl	8000954 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000830:	f000 f844 	bl	80008bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <main+0x20>)
 8000836:	f001 f997 	bl	8001b68 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic_run();
 800083a:	f7ff fd5f 	bl	80002fc <fsm_automatic_run>
 800083e:	e7fc      	b.n	800083a <main+0x1a>
 8000840:	200000a0 	.word	0x200000a0

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b090      	sub	sp, #64	; 0x40
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0318 	add.w	r3, r7, #24
 800084e:	2228      	movs	r2, #40	; 0x28
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f001 fd40 	bl	80022d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086a:	2301      	movs	r3, #1
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086e:	2310      	movs	r3, #16
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000872:	2300      	movs	r3, #0
 8000874:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fd3c 	bl	80012f8 <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000886:	f000 f8d3 	bl	8000a30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 ffa8 	bl	80017f8 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008ae:	f000 f8bf 	bl	8000a30 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3740      	adds	r7, #64	; 0x40
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_TIM2_Init+0x94>)
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_TIM2_Init+0x94>)
 80008e2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80008e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_TIM2_Init+0x94>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_TIM2_Init+0x94>)
 80008f0:	220a      	movs	r2, #10
 80008f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_TIM2_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_TIM2_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000900:	4813      	ldr	r0, [pc, #76]	; (8000950 <MX_TIM2_Init+0x94>)
 8000902:	f001 f8e1 	bl	8001ac8 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800090c:	f000 f890 	bl	8000a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	4619      	mov	r1, r3
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_TIM2_Init+0x94>)
 800091e:	f001 fa77 	bl	8001e10 <HAL_TIM_ConfigClockSource>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000928:	f000 f882 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_TIM2_Init+0x94>)
 800093a:	f001 fc3f 	bl	80021bc <HAL_TIMEx_MasterConfigSynchronization>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000944:	f000 f874 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200000a0 	.word	0x200000a0

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <MX_GPIO_Init+0xb8>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a27      	ldr	r2, [pc, #156]	; (8000a0c <MX_GPIO_Init+0xb8>)
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <MX_GPIO_Init+0xb8>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_GPIO_Init+0xb8>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <MX_GPIO_Init+0xb8>)
 8000986:	f043 0308 	orr.w	r3, r3, #8
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_GPIO_Init+0xb8>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0308 	and.w	r3, r3, #8
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, a_Pin|b_Pin|c_Pin|d_Pin
 8000998:	2200      	movs	r2, #0
 800099a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800099e:	481c      	ldr	r0, [pc, #112]	; (8000a10 <MX_GPIO_Init+0xbc>)
 80009a0:	f000 fc91 	bl	80012c6 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin|a1_Pin
                          |b1_Pin|c1_Pin|d1_Pin|e1_Pin
                          |f1_Pin|g1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LINE1_Pin|ROW0_Pin|ROW1_Pin|RED_LINE_Pin
 80009a4:	2200      	movs	r2, #0
 80009a6:	f641 71f8 	movw	r1, #8184	; 0x1ff8
 80009aa:	481a      	ldr	r0, [pc, #104]	; (8000a14 <MX_GPIO_Init+0xc0>)
 80009ac:	f000 fc8b 	bl	80012c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin a1_Pin
                           b1_Pin c1_Pin d1_Pin e1_Pin
                           f1_Pin g1_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 80009b0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80009b4:	60bb      	str	r3, [r7, #8]
                          |e_Pin|f_Pin|g_Pin|a1_Pin
                          |b1_Pin|c1_Pin|d1_Pin|e1_Pin
                          |f1_Pin|g1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2302      	movs	r3, #2
 80009c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	4619      	mov	r1, r3
 80009c8:	4811      	ldr	r0, [pc, #68]	; (8000a10 <MX_GPIO_Init+0xbc>)
 80009ca:	f000 faeb 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 80009ce:	2307      	movs	r3, #7
 80009d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	4619      	mov	r1, r3
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <MX_GPIO_Init+0xc0>)
 80009e2:	f000 fadf 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE1_Pin ROW0_Pin ROW1_Pin RED_LINE_Pin
                           GREEN_LINE_Pin YELLOW_LINE_Pin RED_ROW_Pin GREEN_ROW_Pin
                           YELLOW_ROW_Pin LINE0_Pin */
  GPIO_InitStruct.Pin = LINE1_Pin|ROW0_Pin|ROW1_Pin|RED_LINE_Pin
 80009e6:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 80009ea:	60bb      	str	r3, [r7, #8]
                          |GREEN_LINE_Pin|YELLOW_LINE_Pin|RED_ROW_Pin|GREEN_ROW_Pin
                          |YELLOW_ROW_Pin|LINE0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2302      	movs	r3, #2
 80009f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	4619      	mov	r1, r3
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_GPIO_Init+0xc0>)
 8000a00:	f000 fad0 	bl	8000fa4 <HAL_GPIO_Init>

}
 8000a04:	bf00      	nop
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010800 	.word	0x40010800
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000a20:	f000 f85a 	bl	8000ad8 <timerRun>
	getKeyInput();
 8000a24:	f7ff fbbc 	bl	80001a0 <getKeyInput>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <setTimer1>:
int timer2_flag = 0;
int timer3_flag = 0;
int time_cycle = 10;

void setTimer1(int duration)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/time_cycle;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <setTimer1+0x28>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a4e:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <setTimer1+0x2c>)
 8000a50:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <setTimer1+0x30>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000040 	.word	0x20000040
 8000a68:	20000088 	.word	0x20000088
 8000a6c:	20000094 	.word	0x20000094

08000a70 <setTimer2>:
void setTimer2(int duration)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/time_cycle;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <setTimer2+0x28>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a82:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <setTimer2+0x2c>)
 8000a84:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <setTimer2+0x30>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000040 	.word	0x20000040
 8000a9c:	2000008c 	.word	0x2000008c
 8000aa0:	20000098 	.word	0x20000098

08000aa4 <setTimer3>:
void setTimer3(int duration)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/time_cycle;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <setTimer3+0x28>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ab6:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <setTimer3+0x2c>)
 8000ab8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <setTimer3+0x30>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000040 	.word	0x20000040
 8000ad0:	20000090 	.word	0x20000090
 8000ad4:	2000009c 	.word	0x2000009c

08000ad8 <timerRun>:

void timerRun()
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <timerRun+0x6c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	dd0b      	ble.n	8000afc <timerRun+0x24>
	{
		timer1_counter--;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <timerRun+0x6c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <timerRun+0x6c>)
 8000aec:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0)
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <timerRun+0x6c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	dc02      	bgt.n	8000afc <timerRun+0x24>
		{
			timer1_flag = 1;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <timerRun+0x70>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0)
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <timerRun+0x74>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	dd0b      	ble.n	8000b1c <timerRun+0x44>
	{
		timer2_counter--;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <timerRun+0x74>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <timerRun+0x74>)
 8000b0c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0)
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <timerRun+0x74>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	dc02      	bgt.n	8000b1c <timerRun+0x44>
		{
			timer2_flag = 1;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <timerRun+0x78>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0)
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <timerRun+0x7c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	dd0b      	ble.n	8000b3c <timerRun+0x64>
	{
		timer3_counter--;
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <timerRun+0x7c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <timerRun+0x7c>)
 8000b2c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0)
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <timerRun+0x7c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	dc02      	bgt.n	8000b3c <timerRun+0x64>
		{
			timer3_flag = 1;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <timerRun+0x80>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	20000088 	.word	0x20000088
 8000b48:	20000094 	.word	0x20000094
 8000b4c:	2000008c 	.word	0x2000008c
 8000b50:	20000098 	.word	0x20000098
 8000b54:	20000090 	.word	0x20000090
 8000b58:	2000009c 	.word	0x2000009c

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_MspInit+0x5c>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <HAL_MspInit+0x5c>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6193      	str	r3, [r2, #24]
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_MspInit+0x5c>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_MspInit+0x5c>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <HAL_MspInit+0x5c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	61d3      	str	r3, [r2, #28]
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_MspInit+0x5c>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_MspInit+0x60>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_MspInit+0x60>)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010000 	.word	0x40010000

08000bc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd0:	d113      	bne.n	8000bfa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_TIM_Base_MspInit+0x44>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <HAL_TIM_Base_MspInit+0x44>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	61d3      	str	r3, [r2, #28]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_TIM_Base_MspInit+0x44>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	201c      	movs	r0, #28
 8000bf0:	f000 f9a1 	bl	8000f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bf4:	201c      	movs	r0, #28
 8000bf6:	f000 f9ba 	bl	8000f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr

08000c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4e:	f000 f87f 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <TIM2_IRQHandler+0x10>)
 8000c5e:	f000 ffcf 	bl	8001c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000a0 	.word	0x200000a0

08000c6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	; (8000cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	; (8000cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c9e:	f7ff ffe5 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f001 faf5 	bl	8002290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca6:	f7ff fdbb 	bl	8000820 <main>
  bx lr
 8000caa:	4770      	bx	lr
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000cb4:	08002328 	.word	0x08002328
  ldr r2, =_sbss
 8000cb8:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000cbc:	200000ec 	.word	0x200000ec

08000cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_2_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_Init+0x28>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_Init+0x28>)
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f923 	bl	8000f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	200f      	movs	r0, #15
 8000cdc:	f000 f808 	bl	8000cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff ff3c 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40022000 	.word	0x40022000

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_InitTick+0x54>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x58>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f93b 	bl	8000f8a <HAL_SYSTICK_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00e      	b.n	8000d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d80a      	bhi.n	8000d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f000 f903 	bl	8000f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d30:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <HAL_InitTick+0x5c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e000      	b.n	8000d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000044 	.word	0x20000044
 8000d48:	2000004c 	.word	0x2000004c
 8000d4c:	20000048 	.word	0x20000048

08000d50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_IncTick+0x1c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_IncTick+0x20>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <HAL_IncTick+0x20>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	2000004c 	.word	0x2000004c
 8000d70:	200000e8 	.word	0x200000e8

08000d74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b02      	ldr	r3, [pc, #8]	; (8000d84 <HAL_GetTick+0x10>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	200000e8 	.word	0x200000e8

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4906      	ldr	r1, [pc, #24]	; (8000e20 <__NVIC_EnableIRQ+0x34>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	; (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	; (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eec:	d301      	bcc.n	8000ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00f      	b.n	8000f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <SysTick_Config+0x40>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efa:	210f      	movs	r1, #15
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f7ff ff90 	bl	8000e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <SysTick_Config+0x40>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <SysTick_Config+0x40>)
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	e000e010 	.word	0xe000e010

08000f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ff2d 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f48:	f7ff ff42 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	6978      	ldr	r0, [r7, #20]
 8000f54:	f7ff ff90 	bl	8000e78 <NVIC_EncodePriority>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff5f 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff35 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffa2 	bl	8000edc <SysTick_Config>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b08b      	sub	sp, #44	; 0x2c
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb6:	e148      	b.n	800124a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	f040 8137 	bne.w	8001244 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4aa3      	ldr	r2, [pc, #652]	; (8001268 <HAL_GPIO_Init+0x2c4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d05e      	beq.n	800109e <HAL_GPIO_Init+0xfa>
 8000fe0:	4aa1      	ldr	r2, [pc, #644]	; (8001268 <HAL_GPIO_Init+0x2c4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d875      	bhi.n	80010d2 <HAL_GPIO_Init+0x12e>
 8000fe6:	4aa1      	ldr	r2, [pc, #644]	; (800126c <HAL_GPIO_Init+0x2c8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d058      	beq.n	800109e <HAL_GPIO_Init+0xfa>
 8000fec:	4a9f      	ldr	r2, [pc, #636]	; (800126c <HAL_GPIO_Init+0x2c8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d86f      	bhi.n	80010d2 <HAL_GPIO_Init+0x12e>
 8000ff2:	4a9f      	ldr	r2, [pc, #636]	; (8001270 <HAL_GPIO_Init+0x2cc>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d052      	beq.n	800109e <HAL_GPIO_Init+0xfa>
 8000ff8:	4a9d      	ldr	r2, [pc, #628]	; (8001270 <HAL_GPIO_Init+0x2cc>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d869      	bhi.n	80010d2 <HAL_GPIO_Init+0x12e>
 8000ffe:	4a9d      	ldr	r2, [pc, #628]	; (8001274 <HAL_GPIO_Init+0x2d0>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d04c      	beq.n	800109e <HAL_GPIO_Init+0xfa>
 8001004:	4a9b      	ldr	r2, [pc, #620]	; (8001274 <HAL_GPIO_Init+0x2d0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d863      	bhi.n	80010d2 <HAL_GPIO_Init+0x12e>
 800100a:	4a9b      	ldr	r2, [pc, #620]	; (8001278 <HAL_GPIO_Init+0x2d4>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d046      	beq.n	800109e <HAL_GPIO_Init+0xfa>
 8001010:	4a99      	ldr	r2, [pc, #612]	; (8001278 <HAL_GPIO_Init+0x2d4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d85d      	bhi.n	80010d2 <HAL_GPIO_Init+0x12e>
 8001016:	2b12      	cmp	r3, #18
 8001018:	d82a      	bhi.n	8001070 <HAL_GPIO_Init+0xcc>
 800101a:	2b12      	cmp	r3, #18
 800101c:	d859      	bhi.n	80010d2 <HAL_GPIO_Init+0x12e>
 800101e:	a201      	add	r2, pc, #4	; (adr r2, 8001024 <HAL_GPIO_Init+0x80>)
 8001020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001024:	0800109f 	.word	0x0800109f
 8001028:	08001079 	.word	0x08001079
 800102c:	0800108b 	.word	0x0800108b
 8001030:	080010cd 	.word	0x080010cd
 8001034:	080010d3 	.word	0x080010d3
 8001038:	080010d3 	.word	0x080010d3
 800103c:	080010d3 	.word	0x080010d3
 8001040:	080010d3 	.word	0x080010d3
 8001044:	080010d3 	.word	0x080010d3
 8001048:	080010d3 	.word	0x080010d3
 800104c:	080010d3 	.word	0x080010d3
 8001050:	080010d3 	.word	0x080010d3
 8001054:	080010d3 	.word	0x080010d3
 8001058:	080010d3 	.word	0x080010d3
 800105c:	080010d3 	.word	0x080010d3
 8001060:	080010d3 	.word	0x080010d3
 8001064:	080010d3 	.word	0x080010d3
 8001068:	08001081 	.word	0x08001081
 800106c:	08001095 	.word	0x08001095
 8001070:	4a82      	ldr	r2, [pc, #520]	; (800127c <HAL_GPIO_Init+0x2d8>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001076:	e02c      	b.n	80010d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	623b      	str	r3, [r7, #32]
          break;
 800107e:	e029      	b.n	80010d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	3304      	adds	r3, #4
 8001086:	623b      	str	r3, [r7, #32]
          break;
 8001088:	e024      	b.n	80010d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	3308      	adds	r3, #8
 8001090:	623b      	str	r3, [r7, #32]
          break;
 8001092:	e01f      	b.n	80010d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	330c      	adds	r3, #12
 800109a:	623b      	str	r3, [r7, #32]
          break;
 800109c:	e01a      	b.n	80010d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d102      	bne.n	80010ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010a6:	2304      	movs	r3, #4
 80010a8:	623b      	str	r3, [r7, #32]
          break;
 80010aa:	e013      	b.n	80010d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d105      	bne.n	80010c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b4:	2308      	movs	r3, #8
 80010b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	611a      	str	r2, [r3, #16]
          break;
 80010be:	e009      	b.n	80010d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c0:	2308      	movs	r3, #8
 80010c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	615a      	str	r2, [r3, #20]
          break;
 80010ca:	e003      	b.n	80010d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
          break;
 80010d0:	e000      	b.n	80010d4 <HAL_GPIO_Init+0x130>
          break;
 80010d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	2bff      	cmp	r3, #255	; 0xff
 80010d8:	d801      	bhi.n	80010de <HAL_GPIO_Init+0x13a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	e001      	b.n	80010e2 <HAL_GPIO_Init+0x13e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3304      	adds	r3, #4
 80010e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	2bff      	cmp	r3, #255	; 0xff
 80010e8:	d802      	bhi.n	80010f0 <HAL_GPIO_Init+0x14c>
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	e002      	b.n	80010f6 <HAL_GPIO_Init+0x152>
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	3b08      	subs	r3, #8
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	210f      	movs	r1, #15
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	401a      	ands	r2, r3
 8001108:	6a39      	ldr	r1, [r7, #32]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	fa01 f303 	lsl.w	r3, r1, r3
 8001110:	431a      	orrs	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 8090 	beq.w	8001244 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <HAL_GPIO_Init+0x2dc>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a55      	ldr	r2, [pc, #340]	; (8001280 <HAL_GPIO_Init+0x2dc>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_GPIO_Init+0x2dc>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800113c:	4a51      	ldr	r2, [pc, #324]	; (8001284 <HAL_GPIO_Init+0x2e0>)
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001148:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a49      	ldr	r2, [pc, #292]	; (8001288 <HAL_GPIO_Init+0x2e4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d00d      	beq.n	8001184 <HAL_GPIO_Init+0x1e0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a48      	ldr	r2, [pc, #288]	; (800128c <HAL_GPIO_Init+0x2e8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d007      	beq.n	8001180 <HAL_GPIO_Init+0x1dc>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a47      	ldr	r2, [pc, #284]	; (8001290 <HAL_GPIO_Init+0x2ec>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d101      	bne.n	800117c <HAL_GPIO_Init+0x1d8>
 8001178:	2302      	movs	r3, #2
 800117a:	e004      	b.n	8001186 <HAL_GPIO_Init+0x1e2>
 800117c:	2303      	movs	r3, #3
 800117e:	e002      	b.n	8001186 <HAL_GPIO_Init+0x1e2>
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <HAL_GPIO_Init+0x1e2>
 8001184:	2300      	movs	r3, #0
 8001186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001188:	f002 0203 	and.w	r2, r2, #3
 800118c:	0092      	lsls	r2, r2, #2
 800118e:	4093      	lsls	r3, r2
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001196:	493b      	ldr	r1, [pc, #236]	; (8001284 <HAL_GPIO_Init+0x2e0>)
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3302      	adds	r3, #2
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011b0:	4b38      	ldr	r3, [pc, #224]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4937      	ldr	r1, [pc, #220]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	600b      	str	r3, [r1, #0]
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011be:	4b35      	ldr	r3, [pc, #212]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	4933      	ldr	r1, [pc, #204]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011d8:	4b2e      	ldr	r3, [pc, #184]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	492d      	ldr	r1, [pc, #180]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011e6:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4929      	ldr	r1, [pc, #164]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	4923      	ldr	r1, [pc, #140]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	608b      	str	r3, [r1, #8]
 800120c:	e006      	b.n	800121c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	43db      	mvns	r3, r3
 8001216:	491f      	ldr	r1, [pc, #124]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 8001218:	4013      	ands	r3, r2
 800121a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d006      	beq.n	8001236 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	4919      	ldr	r1, [pc, #100]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	60cb      	str	r3, [r1, #12]
 8001234:	e006      	b.n	8001244 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	43db      	mvns	r3, r3
 800123e:	4915      	ldr	r1, [pc, #84]	; (8001294 <HAL_GPIO_Init+0x2f0>)
 8001240:	4013      	ands	r3, r2
 8001242:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	3301      	adds	r3, #1
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	fa22 f303 	lsr.w	r3, r2, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	f47f aeaf 	bne.w	8000fb8 <HAL_GPIO_Init+0x14>
  }
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	372c      	adds	r7, #44	; 0x2c
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	10320000 	.word	0x10320000
 800126c:	10310000 	.word	0x10310000
 8001270:	10220000 	.word	0x10220000
 8001274:	10210000 	.word	0x10210000
 8001278:	10120000 	.word	0x10120000
 800127c:	10110000 	.word	0x10110000
 8001280:	40021000 	.word	0x40021000
 8001284:	40010000 	.word	0x40010000
 8001288:	40010800 	.word	0x40010800
 800128c:	40010c00 	.word	0x40010c00
 8001290:	40011000 	.word	0x40011000
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	887b      	ldrh	r3, [r7, #2]
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	e001      	b.n	80012ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	807b      	strh	r3, [r7, #2]
 80012d2:	4613      	mov	r3, r2
 80012d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d6:	787b      	ldrb	r3, [r7, #1]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012dc:	887a      	ldrh	r2, [r7, #2]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012e2:	e003      	b.n	80012ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	041a      	lsls	r2, r3, #16
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	611a      	str	r2, [r3, #16]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e26c      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8087 	beq.w	8001426 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001318:	4b92      	ldr	r3, [pc, #584]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b04      	cmp	r3, #4
 8001322:	d00c      	beq.n	800133e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001324:	4b8f      	ldr	r3, [pc, #572]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b08      	cmp	r3, #8
 800132e:	d112      	bne.n	8001356 <HAL_RCC_OscConfig+0x5e>
 8001330:	4b8c      	ldr	r3, [pc, #560]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800133c:	d10b      	bne.n	8001356 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133e:	4b89      	ldr	r3, [pc, #548]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d06c      	beq.n	8001424 <HAL_RCC_OscConfig+0x12c>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d168      	bne.n	8001424 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e246      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135e:	d106      	bne.n	800136e <HAL_RCC_OscConfig+0x76>
 8001360:	4b80      	ldr	r3, [pc, #512]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a7f      	ldr	r2, [pc, #508]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 8001366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	e02e      	b.n	80013cc <HAL_RCC_OscConfig+0xd4>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x98>
 8001376:	4b7b      	ldr	r3, [pc, #492]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a7a      	ldr	r2, [pc, #488]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 800137c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4b78      	ldr	r3, [pc, #480]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a77      	ldr	r2, [pc, #476]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 8001388:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e01d      	b.n	80013cc <HAL_RCC_OscConfig+0xd4>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001398:	d10c      	bne.n	80013b4 <HAL_RCC_OscConfig+0xbc>
 800139a:	4b72      	ldr	r3, [pc, #456]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a71      	ldr	r2, [pc, #452]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b6f      	ldr	r3, [pc, #444]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a6e      	ldr	r2, [pc, #440]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e00b      	b.n	80013cc <HAL_RCC_OscConfig+0xd4>
 80013b4:	4b6b      	ldr	r3, [pc, #428]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a6a      	ldr	r2, [pc, #424]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b68      	ldr	r3, [pc, #416]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a67      	ldr	r2, [pc, #412]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fcce 	bl	8000d74 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fcca 	bl	8000d74 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1fa      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0xe4>
 80013fa:	e014      	b.n	8001426 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fcba 	bl	8000d74 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fcb6 	bl	8000d74 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e1e6      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001416:	4b53      	ldr	r3, [pc, #332]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x10c>
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d063      	beq.n	80014fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001432:	4b4c      	ldr	r3, [pc, #304]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00b      	beq.n	8001456 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800143e:	4b49      	ldr	r3, [pc, #292]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b08      	cmp	r3, #8
 8001448:	d11c      	bne.n	8001484 <HAL_RCC_OscConfig+0x18c>
 800144a:	4b46      	ldr	r3, [pc, #280]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d116      	bne.n	8001484 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001456:	4b43      	ldr	r3, [pc, #268]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <HAL_RCC_OscConfig+0x176>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d001      	beq.n	800146e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e1ba      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146e:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4939      	ldr	r1, [pc, #228]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	e03a      	b.n	80014fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d020      	beq.n	80014ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800148c:	4b36      	ldr	r3, [pc, #216]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fc6f 	bl	8000d74 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149a:	f7ff fc6b 	bl	8000d74 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e19b      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b8:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4927      	ldr	r1, [pc, #156]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	600b      	str	r3, [r1, #0]
 80014cc:	e015      	b.n	80014fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fc4e 	bl	8000d74 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014dc:	f7ff fc4a 	bl	8000d74 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e17a      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d03a      	beq.n	800157c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d019      	beq.n	8001542 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_RCC_OscConfig+0x274>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001514:	f7ff fc2e 	bl	8000d74 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151c:	f7ff fc2a 	bl	8000d74 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e15a      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <HAL_RCC_OscConfig+0x26c>)
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800153a:	2001      	movs	r0, #1
 800153c:	f000 faa6 	bl	8001a8c <RCC_Delay>
 8001540:	e01c      	b.n	800157c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_RCC_OscConfig+0x274>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff fc14 	bl	8000d74 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154e:	e00f      	b.n	8001570 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001550:	f7ff fc10 	bl	8000d74 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d908      	bls.n	8001570 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e140      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000
 8001568:	42420000 	.word	0x42420000
 800156c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001570:	4b9e      	ldr	r3, [pc, #632]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1e9      	bne.n	8001550 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80a6 	beq.w	80016d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158e:	4b97      	ldr	r3, [pc, #604]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10d      	bne.n	80015b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4b94      	ldr	r3, [pc, #592]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a93      	ldr	r2, [pc, #588]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b91      	ldr	r3, [pc, #580]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b2:	2301      	movs	r3, #1
 80015b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b6:	4b8e      	ldr	r3, [pc, #568]	; (80017f0 <HAL_RCC_OscConfig+0x4f8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d118      	bne.n	80015f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c2:	4b8b      	ldr	r3, [pc, #556]	; (80017f0 <HAL_RCC_OscConfig+0x4f8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a8a      	ldr	r2, [pc, #552]	; (80017f0 <HAL_RCC_OscConfig+0x4f8>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ce:	f7ff fbd1 	bl	8000d74 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f7ff fbcd 	bl	8000d74 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b64      	cmp	r3, #100	; 0x64
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0fd      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	4b81      	ldr	r3, [pc, #516]	; (80017f0 <HAL_RCC_OscConfig+0x4f8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x312>
 80015fc:	4b7b      	ldr	r3, [pc, #492]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4a7a      	ldr	r2, [pc, #488]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6213      	str	r3, [r2, #32]
 8001608:	e02d      	b.n	8001666 <HAL_RCC_OscConfig+0x36e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x334>
 8001612:	4b76      	ldr	r3, [pc, #472]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4a75      	ldr	r2, [pc, #468]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	4b73      	ldr	r3, [pc, #460]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4a72      	ldr	r2, [pc, #456]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001624:	f023 0304 	bic.w	r3, r3, #4
 8001628:	6213      	str	r3, [r2, #32]
 800162a:	e01c      	b.n	8001666 <HAL_RCC_OscConfig+0x36e>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b05      	cmp	r3, #5
 8001632:	d10c      	bne.n	800164e <HAL_RCC_OscConfig+0x356>
 8001634:	4b6d      	ldr	r3, [pc, #436]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a6c      	ldr	r2, [pc, #432]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4a69      	ldr	r2, [pc, #420]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6213      	str	r3, [r2, #32]
 800164c:	e00b      	b.n	8001666 <HAL_RCC_OscConfig+0x36e>
 800164e:	4b67      	ldr	r3, [pc, #412]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4a66      	ldr	r2, [pc, #408]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6213      	str	r3, [r2, #32]
 800165a:	4b64      	ldr	r3, [pc, #400]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4a63      	ldr	r2, [pc, #396]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d015      	beq.n	800169a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166e:	f7ff fb81 	bl	8000d74 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	e00a      	b.n	800168c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff fb7d 	bl	8000d74 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f241 3288 	movw	r2, #5000	; 0x1388
 8001684:	4293      	cmp	r3, r2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e0ab      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168c:	4b57      	ldr	r3, [pc, #348]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0ee      	beq.n	8001676 <HAL_RCC_OscConfig+0x37e>
 8001698:	e014      	b.n	80016c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff fb6b 	bl	8000d74 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff fb67 	bl	8000d74 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e095      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b8:	4b4c      	ldr	r3, [pc, #304]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ee      	bne.n	80016a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d105      	bne.n	80016d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ca:	4b48      	ldr	r3, [pc, #288]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a47      	ldr	r2, [pc, #284]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 80016d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 8081 	beq.w	80017e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e0:	4b42      	ldr	r3, [pc, #264]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d061      	beq.n	80017b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d146      	bne.n	8001782 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f4:	4b3f      	ldr	r3, [pc, #252]	; (80017f4 <HAL_RCC_OscConfig+0x4fc>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fb3b 	bl	8000d74 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff fb37 	bl	8000d74 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e067      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001714:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d108      	bne.n	800173c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800172a:	4b30      	ldr	r3, [pc, #192]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	492d      	ldr	r1, [pc, #180]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800173c:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a19      	ldr	r1, [r3, #32]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	430b      	orrs	r3, r1
 800174e:	4927      	ldr	r1, [pc, #156]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_RCC_OscConfig+0x4fc>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff fb0b 	bl	8000d74 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff fb07 	bl	8000d74 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e037      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x46a>
 8001780:	e02f      	b.n	80017e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <HAL_RCC_OscConfig+0x4fc>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff faf4 	bl	8000d74 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff faf0 	bl	8000d74 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e020      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x498>
 80017ae:	e018      	b.n	80017e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e013      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_OscConfig+0x4f4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40007000 	.word	0x40007000
 80017f4:	42420060 	.word	0x42420060

080017f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0d0      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b6a      	ldr	r3, [pc, #424]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d910      	bls.n	800183c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b67      	ldr	r3, [pc, #412]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 0207 	bic.w	r2, r3, #7
 8001822:	4965      	ldr	r1, [pc, #404]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0b8      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001854:	4b59      	ldr	r3, [pc, #356]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a58      	ldr	r2, [pc, #352]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800185e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4a52      	ldr	r2, [pc, #328]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001876:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001878:	4b50      	ldr	r3, [pc, #320]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	494d      	ldr	r1, [pc, #308]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d040      	beq.n	8001918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d115      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e07f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	4b41      	ldr	r3, [pc, #260]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e073      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06b      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d6:	4b39      	ldr	r3, [pc, #228]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f023 0203 	bic.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4936      	ldr	r1, [pc, #216]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e8:	f7ff fa44 	bl	8000d74 <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7ff fa40 	bl	8000d74 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e053      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 020c 	and.w	r2, r3, #12
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	429a      	cmp	r2, r3
 8001916:	d1eb      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d210      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 0207 	bic.w	r2, r3, #7
 800192e:	4922      	ldr	r1, [pc, #136]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e032      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4916      	ldr	r1, [pc, #88]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	490e      	ldr	r1, [pc, #56]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001986:	f000 f821 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800198a:	4602      	mov	r2, r0
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	490a      	ldr	r1, [pc, #40]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001998:	5ccb      	ldrb	r3, [r1, r3]
 800199a:	fa22 f303 	lsr.w	r3, r2, r3
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <HAL_RCC_ClockConfig+0x1cc>)
 80019a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_ClockConfig+0x1d0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f9a2 	bl	8000cf0 <HAL_InitTick>

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40022000 	.word	0x40022000
 80019bc:	40021000 	.word	0x40021000
 80019c0:	08002310 	.word	0x08002310
 80019c4:	20000044 	.word	0x20000044
 80019c8:	20000048 	.word	0x20000048

080019cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019cc:	b490      	push	{r4, r7}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xb0>)
 80019d4:	1d3c      	adds	r4, r7, #4
 80019d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019dc:	f240 2301 	movw	r3, #513	; 0x201
 80019e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d002      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x40>
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d003      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0x46>
 8001a0a:	e02d      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a0e:	623b      	str	r3, [r7, #32]
      break;
 8001a10:	e02d      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	0c9b      	lsrs	r3, r3, #18
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a1e:	4413      	add	r3, r2
 8001a20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a24:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d013      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	0c5b      	lsrs	r3, r3, #17
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a3e:	4413      	add	r3, r2
 8001a40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a4a:	fb02 f203 	mul.w	r2, r2, r3
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
 8001a56:	e004      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a5c:	fb02 f303 	mul.w	r3, r2, r3
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	623b      	str	r3, [r7, #32]
      break;
 8001a66:	e002      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a6a:	623b      	str	r3, [r7, #32]
      break;
 8001a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc90      	pop	{r4, r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	08002300 	.word	0x08002300
 8001a80:	40021000 	.word	0x40021000
 8001a84:	007a1200 	.word	0x007a1200
 8001a88:	003d0900 	.word	0x003d0900

08001a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <RCC_Delay+0x34>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <RCC_Delay+0x38>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	0a5b      	lsrs	r3, r3, #9
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aa8:	bf00      	nop
  }
  while (Delay --);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1e5a      	subs	r2, r3, #1
 8001aae:	60fa      	str	r2, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f9      	bne.n	8001aa8 <RCC_Delay+0x1c>
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	20000044 	.word	0x20000044
 8001ac4:	10624dd3 	.word	0x10624dd3

08001ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e041      	b.n	8001b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff f866 	bl	8000bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3304      	adds	r3, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f000 fa6a 	bl	8001fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d001      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e035      	b.n	8001bec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <HAL_TIM_Base_Start_IT+0x90>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d009      	beq.n	8001bb6 <HAL_TIM_Base_Start_IT+0x4e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001baa:	d004      	beq.n	8001bb6 <HAL_TIM_Base_Start_IT+0x4e>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <HAL_TIM_Base_Start_IT+0x94>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d111      	bne.n	8001bda <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2b06      	cmp	r3, #6
 8001bc6:	d010      	beq.n	8001bea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd8:	e007      	b.n	8001bea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40012c00 	.word	0x40012c00
 8001bfc:	40000400 	.word	0x40000400

08001c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d122      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d11b      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0202 	mvn.w	r2, #2
 8001c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f9b1 	bl	8001faa <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f9a4 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f9b3 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d122      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d11b      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0204 	mvn.w	r2, #4
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2202      	movs	r2, #2
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f987 	bl	8001faa <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f97a 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f989 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d122      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d11b      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0208 	mvn.w	r2, #8
 8001cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2204      	movs	r2, #4
 8001cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f95d 	bl	8001faa <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f950 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f95f 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	2b10      	cmp	r3, #16
 8001d10:	d122      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b10      	cmp	r3, #16
 8001d1e:	d11b      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0210 	mvn.w	r2, #16
 8001d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f933 	bl	8001faa <HAL_TIM_IC_CaptureCallback>
 8001d44:	e005      	b.n	8001d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f926 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f935 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d10e      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0201 	mvn.w	r2, #1
 8001d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fe4a 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b80      	cmp	r3, #128	; 0x80
 8001d90:	d10e      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9c:	2b80      	cmp	r3, #128	; 0x80
 8001d9e:	d107      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fa67 	bl	800227e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dba:	2b40      	cmp	r3, #64	; 0x40
 8001dbc:	d10e      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	d107      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8f9 	bl	8001fce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d10e      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0320 	and.w	r3, r3, #32
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d107      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0220 	mvn.w	r2, #32
 8001e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fa32 	bl	800226c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_TIM_ConfigClockSource+0x18>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e0b3      	b.n	8001f90 <HAL_TIM_ConfigClockSource+0x180>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e60:	d03e      	beq.n	8001ee0 <HAL_TIM_ConfigClockSource+0xd0>
 8001e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e66:	f200 8087 	bhi.w	8001f78 <HAL_TIM_ConfigClockSource+0x168>
 8001e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e6e:	f000 8085 	beq.w	8001f7c <HAL_TIM_ConfigClockSource+0x16c>
 8001e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e76:	d87f      	bhi.n	8001f78 <HAL_TIM_ConfigClockSource+0x168>
 8001e78:	2b70      	cmp	r3, #112	; 0x70
 8001e7a:	d01a      	beq.n	8001eb2 <HAL_TIM_ConfigClockSource+0xa2>
 8001e7c:	2b70      	cmp	r3, #112	; 0x70
 8001e7e:	d87b      	bhi.n	8001f78 <HAL_TIM_ConfigClockSource+0x168>
 8001e80:	2b60      	cmp	r3, #96	; 0x60
 8001e82:	d050      	beq.n	8001f26 <HAL_TIM_ConfigClockSource+0x116>
 8001e84:	2b60      	cmp	r3, #96	; 0x60
 8001e86:	d877      	bhi.n	8001f78 <HAL_TIM_ConfigClockSource+0x168>
 8001e88:	2b50      	cmp	r3, #80	; 0x50
 8001e8a:	d03c      	beq.n	8001f06 <HAL_TIM_ConfigClockSource+0xf6>
 8001e8c:	2b50      	cmp	r3, #80	; 0x50
 8001e8e:	d873      	bhi.n	8001f78 <HAL_TIM_ConfigClockSource+0x168>
 8001e90:	2b40      	cmp	r3, #64	; 0x40
 8001e92:	d058      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0x136>
 8001e94:	2b40      	cmp	r3, #64	; 0x40
 8001e96:	d86f      	bhi.n	8001f78 <HAL_TIM_ConfigClockSource+0x168>
 8001e98:	2b30      	cmp	r3, #48	; 0x30
 8001e9a:	d064      	beq.n	8001f66 <HAL_TIM_ConfigClockSource+0x156>
 8001e9c:	2b30      	cmp	r3, #48	; 0x30
 8001e9e:	d86b      	bhi.n	8001f78 <HAL_TIM_ConfigClockSource+0x168>
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d060      	beq.n	8001f66 <HAL_TIM_ConfigClockSource+0x156>
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d867      	bhi.n	8001f78 <HAL_TIM_ConfigClockSource+0x168>
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d05c      	beq.n	8001f66 <HAL_TIM_ConfigClockSource+0x156>
 8001eac:	2b10      	cmp	r3, #16
 8001eae:	d05a      	beq.n	8001f66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001eb0:	e062      	b.n	8001f78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6899      	ldr	r1, [r3, #8]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f000 f95c 	bl	800217e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ed4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	609a      	str	r2, [r3, #8]
      break;
 8001ede:	e04e      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6899      	ldr	r1, [r3, #8]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f000 f945 	bl	800217e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f02:	609a      	str	r2, [r3, #8]
      break;
 8001f04:	e03b      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6859      	ldr	r1, [r3, #4]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f000 f8bc 	bl	8002090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2150      	movs	r1, #80	; 0x50
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f913 	bl	800214a <TIM_ITRx_SetConfig>
      break;
 8001f24:	e02b      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	461a      	mov	r2, r3
 8001f34:	f000 f8da 	bl	80020ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2160      	movs	r1, #96	; 0x60
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f903 	bl	800214a <TIM_ITRx_SetConfig>
      break;
 8001f44:	e01b      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	6859      	ldr	r1, [r3, #4]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	461a      	mov	r2, r3
 8001f54:	f000 f89c 	bl	8002090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2140      	movs	r1, #64	; 0x40
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f8f3 	bl	800214a <TIM_ITRx_SetConfig>
      break;
 8001f64:	e00b      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4610      	mov	r0, r2
 8001f72:	f000 f8ea 	bl	800214a <TIM_ITRx_SetConfig>
        break;
 8001f76:	e002      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f78:	bf00      	nop
 8001f7a:	e000      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a25      	ldr	r2, [pc, #148]	; (8002088 <TIM_Base_SetConfig+0xa8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d007      	beq.n	8002008 <TIM_Base_SetConfig+0x28>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffe:	d003      	beq.n	8002008 <TIM_Base_SetConfig+0x28>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a22      	ldr	r2, [pc, #136]	; (800208c <TIM_Base_SetConfig+0xac>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d108      	bne.n	800201a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <TIM_Base_SetConfig+0xa8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <TIM_Base_SetConfig+0x52>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002028:	d003      	beq.n	8002032 <TIM_Base_SetConfig+0x52>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a17      	ldr	r2, [pc, #92]	; (800208c <TIM_Base_SetConfig+0xac>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d108      	bne.n	8002044 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a07      	ldr	r2, [pc, #28]	; (8002088 <TIM_Base_SetConfig+0xa8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d103      	bne.n	8002078 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	615a      	str	r2, [r3, #20]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	40012c00 	.word	0x40012c00
 800208c:	40000400 	.word	0x40000400

08002090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	f023 0201 	bic.w	r2, r3, #1
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f023 030a 	bic.w	r3, r3, #10
 80020cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	621a      	str	r2, [r3, #32]
}
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f023 0210 	bic.w	r2, r3, #16
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002116:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	031b      	lsls	r3, r3, #12
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002128:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	621a      	str	r2, [r3, #32]
}
 8002140:	bf00      	nop
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	f043 0307 	orr.w	r3, r3, #7
 800216c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	609a      	str	r2, [r3, #8]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800217e:	b480      	push	{r7}
 8002180:	b087      	sub	sp, #28
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002198:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	021a      	lsls	r2, r3, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	609a      	str	r2, [r3, #8]
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e041      	b.n	8002258 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a14      	ldr	r2, [pc, #80]	; (8002264 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d009      	beq.n	800222c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002220:	d004      	beq.n	800222c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d10c      	bne.n	8002246 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002232:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	4313      	orrs	r3, r2
 800223c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40000400 	.word	0x40000400

0800226c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <__libc_init_array>:
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	2600      	movs	r6, #0
 8002294:	4d0c      	ldr	r5, [pc, #48]	; (80022c8 <__libc_init_array+0x38>)
 8002296:	4c0d      	ldr	r4, [pc, #52]	; (80022cc <__libc_init_array+0x3c>)
 8002298:	1b64      	subs	r4, r4, r5
 800229a:	10a4      	asrs	r4, r4, #2
 800229c:	42a6      	cmp	r6, r4
 800229e:	d109      	bne.n	80022b4 <__libc_init_array+0x24>
 80022a0:	f000 f822 	bl	80022e8 <_init>
 80022a4:	2600      	movs	r6, #0
 80022a6:	4d0a      	ldr	r5, [pc, #40]	; (80022d0 <__libc_init_array+0x40>)
 80022a8:	4c0a      	ldr	r4, [pc, #40]	; (80022d4 <__libc_init_array+0x44>)
 80022aa:	1b64      	subs	r4, r4, r5
 80022ac:	10a4      	asrs	r4, r4, #2
 80022ae:	42a6      	cmp	r6, r4
 80022b0:	d105      	bne.n	80022be <__libc_init_array+0x2e>
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
 80022b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b8:	4798      	blx	r3
 80022ba:	3601      	adds	r6, #1
 80022bc:	e7ee      	b.n	800229c <__libc_init_array+0xc>
 80022be:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c2:	4798      	blx	r3
 80022c4:	3601      	adds	r6, #1
 80022c6:	e7f2      	b.n	80022ae <__libc_init_array+0x1e>
 80022c8:	08002320 	.word	0x08002320
 80022cc:	08002320 	.word	0x08002320
 80022d0:	08002320 	.word	0x08002320
 80022d4:	08002324 	.word	0x08002324

080022d8 <memset>:
 80022d8:	4603      	mov	r3, r0
 80022da:	4402      	add	r2, r0
 80022dc:	4293      	cmp	r3, r2
 80022de:	d100      	bne.n	80022e2 <memset+0xa>
 80022e0:	4770      	bx	lr
 80022e2:	f803 1b01 	strb.w	r1, [r3], #1
 80022e6:	e7f9      	b.n	80022dc <memset+0x4>

080022e8 <_init>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	bf00      	nop
 80022ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ee:	bc08      	pop	{r3}
 80022f0:	469e      	mov	lr, r3
 80022f2:	4770      	bx	lr

080022f4 <_fini>:
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	bf00      	nop
 80022f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fa:	bc08      	pop	{r3}
 80022fc:	469e      	mov	lr, r3
 80022fe:	4770      	bx	lr
